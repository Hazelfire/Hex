#EVENTS
props = {
	name: "Eval",
	author: "Ewan Breakey",
	version: 1.0,
	desc: `
	More of a technique than a bot
	the 'eval' method involves
	storing all posible moves,
	'eval'uating them and choosing
	the best one. the complexity comes
	in your start, how you evaluate,
	how you cull (remove moves).
	This example uses a very basic eval
	function which checks for a hex
	with the most neighbours of type
	'checkFor' stored in a variable.
	feel free to modify or build off
	of this example.`
}

init {
	var checkFor = "'same'";

	//DEFINE EVALUATE FUNCTION
	function evaluate(board)
	{
		var score = 0;
		for (var i=0;i<gridSize;i++)
		{
			for (var j=0;j<gridSize;j++)
			{
				//IF ITS OUR PEICE
				if (board[i][j] == turn+1)
				{
					score += 1+neighbours_ext(i,j,eval(checkFor),board);
				}
			}
		}
		return score;
	}

}

main {

//GET ALL POSIBLE MOVES
var moves = new Array();
for (i=0;i<gridSize;i++)
{
	for (j=0;j<gridSize;j++)
	{
		if (empty(i, j))
		{
			moves.push({x: i,y: j});
		}
	}
}


//CREATE ARRAY OF SCORES
var scores = new Array();

//CREATE WORKING COPY
for (i=0;i<moves.length;i++)
{
	var work = clone();
	work[moves[i].x][moves[i].y] = turn+1;
	scores.push(evaluate(work));
}


//CHOOSE MOVE BY LOOKING AT SCORES
var best = 0;
var bestI = 0;
for (i=0;i<scores.length;i++)
{
	if (scores[i] > best)
	{
		best = scores[i];
		bestI = i;
	}
}

return hex(moves[bestI].x,moves[bestI].y);
}
