var properties = {
	name: "Bucket",
	author: "E Breakey",
	description: `
	Uses a fill algorithim with spread
  weights and a check for finishing moves.`,
	version: 1.0
}

function init (){

}

function main (){
	//FIRST TURN IS CENTRE
	if (isFirstTurn() && empty(5,5))
	{
		return hex(5,5);
	}

	//DEFINE EVALUATE FUNCTION
	function evaluate(board)
	{
		var score = 0;
		for (var i=0;i<gridSize;i++)
		{
			for (var j=0;j<gridSize;j++)
			{
				//IF ITS OUR PEICE
				if (board[i][j] == turn+1)
				{
					//GET SCORE FOR BEING NEAR US
					score += neighbours_ext(i,j,red,board);
					score -= Math.abs(gridSize/2 - i)*((turn==0) ? 0.75 : 1.0);
					score -= Math.abs(gridSize/2 - j)*((turn==1) ? 0.75 : 1.0);
				}
			}
		}

		//IF WE DO THIS DO WE WIN?
		if (will_win(board))
		{
			//THEN DO IT!
			score += 1000;
		}

		return score;
	}

	//GET ALL POSIBLE MOVES
	var moves = new Array();
	for (i=0;i<gridSize;i++)
	{
		for (j=0;j<gridSize;j++)
		{
			if (empty(i,j))
			{
				moves.push({x: i,y: j});
			}
		}
	}


	//CREATE ARRAY OF SCORES
	var scores = new Array();

	//CREATE WORKING COPY
	for (i=0;i<moves.length;i++)
	{
		var work = clone();
		perform_move(work, moves[i].x, moves[i].y)
		scores.push(evaluate(work));
	}


	//CHOOSE MOVE BY LOOKING AT SCORES
	var best = -999;
	var bestI = 0;
	for (i=0;i<scores.length;i++)
	{
		if (scores[i] > best)
		{
			best = scores[i];
			bestI = i;
		}
	}

	return hex(moves[bestI].x,moves[bestI].y);
}
